// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/pages/popular_movies_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:ui' as _i13;

import 'package:ditonton/common/state_enum.dart' as _i10;
import 'package:ditonton/domain/entities/movie.dart' as _i11;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i8;
import 'package:ditonton/domain/usecases/get_movie_detail.dart' as _i3;
import 'package:ditonton/domain/usecases/get_movie_recommendations.dart' as _i4;
import 'package:ditonton/domain/usecases/get_popular_movies.dart' as _i2;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i5;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i7;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i6;
import 'package:ditonton/presentation/provider/movie_detail_notifier.dart'
    as _i14;
import 'package:ditonton/presentation/provider/popular_movies_notifier.dart'
    as _i9;
import 'package:flutter/material.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetPopularMovies_0 extends _i1.SmartFake
    implements _i2.GetPopularMovies {
  _FakeGetPopularMovies_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetMovieDetail_1 extends _i1.SmartFake
    implements _i3.GetMovieDetail {
  _FakeGetMovieDetail_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetMovieRecommendations_2 extends _i1.SmartFake
    implements _i4.GetMovieRecommendations {
  _FakeGetMovieRecommendations_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchListStatus_3 extends _i1.SmartFake
    implements _i5.GetWatchListStatus {
  _FakeGetWatchListStatus_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveWatchlist_4 extends _i1.SmartFake implements _i6.SaveWatchlist {
  _FakeSaveWatchlist_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoveWatchlist_5 extends _i1.SmartFake
    implements _i7.RemoveWatchlist {
  _FakeRemoveWatchlist_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMovieDetail_6 extends _i1.SmartFake implements _i8.MovieDetail {
  _FakeMovieDetail_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [PopularMoviesNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesNotifier extends _i1.Mock
    implements _i9.PopularMoviesNotifier {
  MockPopularMoviesNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPopularMovies get getPopularMovies => (super.noSuchMethod(
      Invocation.getter(#getPopularMovies),
      returnValue: _FakeGetPopularMovies_0(
          this, Invocation.getter(#getPopularMovies))) as _i2.GetPopularMovies);
  @override
  _i10.RequestState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i10.RequestState.Empty) as _i10.RequestState);
  @override
  List<_i11.Movie> get movies => (super.noSuchMethod(Invocation.getter(#movies),
      returnValue: <_i11.Movie>[]) as List<_i11.Movie>);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchPopularMovies, []),
              returnValue: _i12.Future<void>.value(),
              returnValueForMissingStub: _i12.Future<void>.value())
          as _i12.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [MovieDetailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailNotifier extends _i1.Mock
    implements _i14.MovieDetailNotifier {
  MockMovieDetailNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetMovieDetail get getMovieDetail => (super.noSuchMethod(
          Invocation.getter(#getMovieDetail),
          returnValue:
              _FakeGetMovieDetail_1(this, Invocation.getter(#getMovieDetail)))
      as _i3.GetMovieDetail);
  @override
  _i4.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_2(
                  this, Invocation.getter(#getMovieRecommendations)))
          as _i4.GetMovieRecommendations);
  @override
  _i5.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
              returnValue: _FakeGetWatchListStatus_3(
                  this, Invocation.getter(#getWatchListStatus)))
          as _i5.GetWatchListStatus);
  @override
  _i6.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
              returnValue:
                  _FakeSaveWatchlist_4(this, Invocation.getter(#saveWatchlist)))
          as _i6.SaveWatchlist);
  @override
  _i7.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
          Invocation.getter(#removeWatchlist),
          returnValue:
              _FakeRemoveWatchlist_5(this, Invocation.getter(#removeWatchlist)))
      as _i7.RemoveWatchlist);
  @override
  _i8.MovieDetail get movie => (super.noSuchMethod(Invocation.getter(#movie),
          returnValue: _FakeMovieDetail_6(this, Invocation.getter(#movie)))
      as _i8.MovieDetail);
  @override
  _i10.RequestState get movieState =>
      (super.noSuchMethod(Invocation.getter(#movieState),
          returnValue: _i10.RequestState.Empty) as _i10.RequestState);
  @override
  List<_i11.Movie> get movieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#movieRecommendations),
          returnValue: <_i11.Movie>[]) as List<_i11.Movie>);
  @override
  _i10.RequestState get recommendationState =>
      (super.noSuchMethod(Invocation.getter(#recommendationState),
          returnValue: _i10.RequestState.Empty) as _i10.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get isAddedToWatchlist =>
      (super.noSuchMethod(Invocation.getter(#isAddedToWatchlist),
          returnValue: false) as bool);
  @override
  String get watchlistMessage =>
      (super.noSuchMethod(Invocation.getter(#watchlistMessage), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#fetchMovieDetail, [id]),
              returnValue: _i12.Future<void>.value(),
              returnValueForMissingStub: _i12.Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> addWatchlist(_i8.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#addWatchlist, [movie]),
              returnValue: _i12.Future<void>.value(),
              returnValueForMissingStub: _i12.Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> removeFromWatchlist(_i8.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlist, [movie]),
              returnValue: _i12.Future<void>.value(),
              returnValueForMissingStub: _i12.Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> loadWatchlistStatus(int? id) =>
      (super.noSuchMethod(Invocation.method(#loadWatchlistStatus, [id]),
              returnValue: _i12.Future<void>.value(),
              returnValueForMissingStub: _i12.Future<void>.value())
          as _i12.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i15.NavigatorObserver {
  @override
  void didPush(
          _i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i15.Route<dynamic>? newRoute, _i15.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i15.Route<dynamic>? route, _i15.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}
